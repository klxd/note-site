webpackJsonp([0x8d1d10a49e9ef00],{"./node_modules/json-loader/index.js!./.cache/json/java-classloader.json":function(e,a){e.exports={data:{site:{siteMetadata:{title:"Note Site",author:"stone"}},markdownRemark:{id:"/home/peng/HUE/WorkSpace/selfDevelop/note-site/src/pages/2017-09-05-classloader/index.md absPath of file >>> MarkdownRemark",html:"<h3>Java中的类加载时机</h3>\n<ul>\n<li>\n<p>遇到<code>new</code> <code>getstatic</code> <code>putstatic</code> 或者 <code>invokestatic</code>这四种字节码指令时，对类进行初始化\n<code>new</code>可以认定为一种特殊的静态方法</p>\n</li>\n<li>\n<p>使用反射方法对类进行反射调用的时候</p>\n</li>\n<li>\n<p>当初始化一个类的时候，自动初始化其父类</p>\n</li>\n<li>\n<p>当虚拟机启动时，会触发执行主类（包含main方法的那个类）的初始化</p>\n</li>\n<li>\n<p>使用JDK7中的动态语言支持时，若是触发了<code>java.lang.invoke.MethodHandle</code>实例的调用，会对相应的类进行初始化</p>\n</li>\n</ul>",frontmatter:{title:"Java Classloader",date:"September 05, 2017"}}},pathContext:{path:"/java-classloader/"}}}});
//# sourceMappingURL=path---java-classloader-3f7467a5a81fc17f8f1b.js.map