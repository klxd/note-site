{"version":3,"sources":["webpack:///path---java-classloader-0342926ac944edaf45fa.js","webpack:///./.cache/json/java-classloader.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/java-classloader.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path"],"mappings":"AAAAA,cAAc,oBAERC,0EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,aAAAC,OAAA,UAAuCC,gBAAmBC,GAAA,uHAAAC,KAAA,qbAAAC,aAAukBL,MAAA,mBAAAM,KAAA,wBAAyDC,aAAgBC,KAAA","file":"path---java-classloader-0342926ac944edaf45fa.js","sourcesContent":["webpackJsonp([635518864555896600],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/java-classloader.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Stone Blog\",\"author\":\"stone\"}},\"markdownRemark\":{\"id\":\"/home/peng/develop/workspace/stone-site/src/pages/2017-09-05-classloader/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>Java中的类加载时机</h3>\\n<ul>\\n<li>\\n<p>遇到<code>new</code> <code>getstatic</code> <code>putstatic</code> 或者 <code>invokestatic</code>这四种字节码指令时，对类进行初始化\\n<code>new</code>可以认定为一种特殊的静态方法</p>\\n</li>\\n<li>\\n<p>使用反射方法对类进行反射调用的时候</p>\\n</li>\\n<li>\\n<p>当初始化一个类的时候，自动初始化其父类</p>\\n</li>\\n<li>\\n<p>当虚拟机启动时，会触发执行主类（包含main方法的那个类）的初始化</p>\\n</li>\\n<li>\\n<p>使用JDK7中的动态语言支持时，若是触发了<code>java.lang.invoke.MethodHandle</code>实例的调用，会对相应的类进行初始化</p>\\n</li>\\n</ul>\",\"frontmatter\":{\"title\":\"Java Classloader\",\"date\":\"September 05, 2017\"}}},\"pathContext\":{\"path\":\"/java-classloader/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---java-classloader-0342926ac944edaf45fa.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Stone Blog\",\"author\":\"stone\"}},\"markdownRemark\":{\"id\":\"/home/peng/develop/workspace/stone-site/src/pages/2017-09-05-classloader/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>Java中的类加载时机</h3>\\n<ul>\\n<li>\\n<p>遇到<code>new</code> <code>getstatic</code> <code>putstatic</code> 或者 <code>invokestatic</code>这四种字节码指令时，对类进行初始化\\n<code>new</code>可以认定为一种特殊的静态方法</p>\\n</li>\\n<li>\\n<p>使用反射方法对类进行反射调用的时候</p>\\n</li>\\n<li>\\n<p>当初始化一个类的时候，自动初始化其父类</p>\\n</li>\\n<li>\\n<p>当虚拟机启动时，会触发执行主类（包含main方法的那个类）的初始化</p>\\n</li>\\n<li>\\n<p>使用JDK7中的动态语言支持时，若是触发了<code>java.lang.invoke.MethodHandle</code>实例的调用，会对相应的类进行初始化</p>\\n</li>\\n</ul>\",\"frontmatter\":{\"title\":\"Java Classloader\",\"date\":\"September 05, 2017\"}}},\"pathContext\":{\"path\":\"/java-classloader/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/java-classloader.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/java-classloader.json\n// module chunks = 635518864555896600"],"sourceRoot":""}