{"version":3,"sources":["webpack:///path---java-atomic-45770a5f8e92eaa5464b.js","webpack:///./.cache/json/java-atomic.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/java-atomic.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","tableOfContents","frontmatter","date","tags","pathContext","path"],"mappings":"AAAAA,cAAc,oBAERC,qEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,YAAAC,OAAA,UAAsCC,gBAAmBC,GAAA,uHAAAC,KAAA;AAAsnhFC,gBAAA,0kBAAAC,aAAyxBN,MAAA,cAAAO,KAAA,oBAAAC,MAAA,WAAmEC,aAAgBC,KAAA","file":"path---java-atomic-45770a5f8e92eaa5464b.js","sourcesContent":["webpackJsonp([930173780009414900],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/java-atomic.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Note Site\",\"author\":\"stone\"}},\"markdownRemark\":{\"id\":\"/home/peng/develop/workspace/stone-site/src/pages/2018-01-02-java-atomic/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2 id=\\\"原子更新基本类型\\\"><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>原子更新基本类型</h2>\\n<ul>\\n<li>AtomicInteger 原子更新整形</li>\\n<li>AtomicBoolean 原子更新布尔类型</li>\\n<li>AtomicLong 原子更新长整形</li>\\n<li>对于其他基本类型<code>double</code>,<code>float</code>,<code>byte</code>,<code>char</code>没有相应的原子更新类,因为其相应的更新类均可以使用以上三个类进行包装得到,如<code>byte</code>和<code>char</code>可简单包装为整形,\\n<code>float</code>可以使用<code>Float.floatToIntBits</code>转化为整形,\\n<code>double</code>可以使用<code>Double.doubleToLongBits</code>转化为长整形</li>\\n</ul>\\n<p>AtomicInteger</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AtomicInteger</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Number</span> <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">java<span class=\\\"token punctuation\\\">.</span>io<span class=\\\"token punctuation\\\">.</span>Serializable</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">AtomicInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> initialValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        value <span class=\\\"token operator\\\">=</span> initialValue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">AtomicInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        value <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 最终设置成新值,使用lazySet设置值之后,\\n     * 可能导致其他线程在之后的一小段时间内还是读取旧的值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lazySet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">putOrderedInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 设置新值并返回旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndSet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndSetInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 若当前值等于期望值,则设置为新值\\n     * @return 是否更新成功,即当前值是否等于期望值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> expect<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> update<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSwapInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> expect<span class=\\\"token punctuation\\\">,</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 过期的方法,实现与compareAndSet相同\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">weakCompareAndSet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> expect<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> update<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSwapInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> expect<span class=\\\"token punctuation\\\">,</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i++\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndIncrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i--\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndDecrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i += n, return old i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndAdd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> delta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> delta<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * ++i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">incrementAndGet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * --i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">decrementAndGet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i += n, return updated i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">addAndGet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> delta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> delta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> delta<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个函数来更新数值,此函数应该是无副作用的,因为它可能被调用多次\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndUpdate</span><span class=\\\"token punctuation\\\">(</span>IntUnaryOperator updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个函数来更新数值,此函数应该是无副作用的,因为它可能被调用多次\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">updateAndGet</span><span class=\\\"token punctuation\\\">(</span>IntUnaryOperator updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的,需要两个参数的函数\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndAccumulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">,</span>\\n                                      IntBinaryOperator accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的,需要两个参数的函数\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">accumulateAndGet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">,</span>\\n                                      IntBinaryOperator accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"原子更新数组\\\"><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E6%95%B0%E7%BB%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>原子更新数组</h2>\\n<ul>\\n<li>AtomicIntegerArray: 原子更新整形数组中的元素</li>\\n<li>AtomicLongArray: 原子更新长整型数组里的元素</li>\\n<li>AtomicReferenceArray: 原子更新引用类型数组里的元素</li>\\n</ul>\\n<h2 id=\\\"原子更新引用类型\\\"><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>原子更新引用类型</h2>\\n<ul>\\n<li>AtomicReference</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AtomicReference</span><span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">java<span class=\\\"token punctuation\\\">.</span>io<span class=\\\"token punctuation\\\">.</span>Serializable</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 构造函数,附带初始值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">AtomicReference</span><span class=\\\"token punctuation\\\">(</span>V initialValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        value <span class=\\\"token operator\\\">=</span> initialValue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 构造函数,初始值为null\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">AtomicReference</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 返回当前值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 设置新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span>V newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        value <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 最终设置为新值,之前有一段时间可能为旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lazySet</span><span class=\\\"token punctuation\\\">(</span>V newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">putOrderedObject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * CAS,注意期望值必须{@code ==}当前值,若只是{@code equals}将会判定为不等\\n     * @return 是否成功\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>V expect<span class=\\\"token punctuation\\\">,</span> V update<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSwapObject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> expect<span class=\\\"token punctuation\\\">,</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 过期函数,实现与CAS相同\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">weakCompareAndSet</span><span class=\\\"token punctuation\\\">(</span>V expect<span class=\\\"token punctuation\\\">,</span> V update<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSwapObject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> expect<span class=\\\"token punctuation\\\">,</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 设置新值,返回旧值\\n     */</span>\\n    <span class=\\\"token annotation punctuation\\\">@SuppressWarnings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unchecked\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">getAndSet</span><span class=\\\"token punctuation\\\">(</span>V newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>V<span class=\\\"token punctuation\\\">)</span>unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndSetObject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的函数,修改当前值为新值\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">getAndUpdate</span><span class=\\\"token punctuation\\\">(</span>UnaryOperator<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        V prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的函数,修改当前值为新值\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">updateAndGet</span><span class=\\\"token punctuation\\\">(</span>UnaryOperator<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        V prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个操作值和一个二元操作函数,计算得到新值\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">getAndAccumulate</span><span class=\\\"token punctuation\\\">(</span>V x<span class=\\\"token punctuation\\\">,</span>\\n                                    BinaryOperator<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        V prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个操作值和一个二元操作函数,计算得到新值\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">accumulateAndGet</span><span class=\\\"token punctuation\\\">(</span>V x<span class=\\\"token punctuation\\\">,</span>\\n                                    BinaryOperator<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        V prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"代码示例\\\"><a href=\\\"#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>代码示例</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>atomic<span class=\\\"token punctuation\\\">.</span>AtomicReference<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AtomicReferenceTest</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> AtomicReference<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token operator\\\">></span> userAtomicReference <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">AtomicReference</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">private</span> String name<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">int</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">User</span><span class=\\\"token punctuation\\\">(</span>String name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">=</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> String <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> String<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"User[name: %s, id: %s]\\\"</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">,</span> id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>Object obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span>obj <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            User o <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">)</span> obj<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> o<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> o<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">==</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">53</span> <span class=\\\"token operator\\\">+</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        User user1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"u1\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        User user2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"u2\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        User user3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"u1\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span>user1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> user1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> user3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>user3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true</span>\\n\\n        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 使用user3做CAS,更新失败</span>\\n        userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>user3<span class=\\\"token punctuation\\\">,</span> user2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 使用user1做CAS,更新成功</span>\\n        userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>user1<span class=\\\"token punctuation\\\">,</span> user2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>输出为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>true\\nfalse\\ntrue\\nUser[name: u1, id: 10]\\nUser[name: u2, id: 12]</code></pre>\\n      </div>\\n<h2 id=\\\"原子更新字段\\\"><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>原子更新字段</h2>\\n<ul>\\n<li>AtomicIntegerFieldUpdater: 原子更新整型的字段的更新器</li>\\n<li>AtomicLongFieldUpdater: 原子更新长整型字段的更新器</li>\\n<li>AtomicStampedReference: 原子更新带有版本号的引用类型.该类将整数值与引用关联起来,可用于原子的更新数据和数据的版本号,可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AtomicIntegerFieldUpdater</span><span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 静态方法,用于构建一个更新器对象\\n     * @param tclass 需要被更新的类\\n     * @param fieldName 需要被更新的字段\\n     */</span>\\n    <span class=\\\"token annotation punctuation\\\">@CallerSensitive</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token operator\\\">&lt;</span>U<span class=\\\"token operator\\\">></span> AtomicIntegerFieldUpdater<span class=\\\"token operator\\\">&lt;</span>U<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">newUpdater</span><span class=\\\"token punctuation\\\">(</span>Class<span class=\\\"token operator\\\">&lt;</span>U<span class=\\\"token operator\\\">></span> tclass<span class=\\\"token punctuation\\\">,</span>\\n                                                              String fieldName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">AtomicIntegerFieldUpdaterImpl</span><span class=\\\"token operator\\\">&lt;</span>U<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">(</span>tclass<span class=\\\"token punctuation\\\">,</span> fieldName<span class=\\\"token punctuation\\\">,</span> Reflection<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getCallerClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * CAS\\n     * @param obj An object whose field to conditionally set\\n     * @param expect the expected value\\n     * @param update the new value\\n     * @return 是否更新成功\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> expect<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 过期方法,作用同CAS\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">weakCompareAndSet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> expect<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 设置新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 最终设置为新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lazySet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 获得值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 设置新值,返回旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndSet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i++\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndIncrement</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i--\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndDecrement</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i += n, 返回旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndAdd</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> delta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">+</span> delta<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * ++i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">incrementAndGet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * --i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">decrementAndGet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i += n, 返回新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">addAndGet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> delta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">+</span> delta<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的函数用于更新值\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndUpdate</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> IntUnaryOperator updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的函数用于更新值\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">updateAndGet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> IntUnaryOperator updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个操作数和二元操作函数用于计算新值\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndAccumulate</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">,</span>\\n                                      IntBinaryOperator accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个操作数和二元操作函数用于计算新值\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">accumulateAndGet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">,</span>\\n                                      IntBinaryOperator accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"代码示例-1\\\"><a href=\\\"#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>代码示例</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>atomic<span class=\\\"token punctuation\\\">.</span>AtomicIntegerFieldUpdater<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AtomicIntegerFieldUpdaterTest</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> AtomicIntegerFieldUpdater<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token operator\\\">></span> a <span class=\\\"token operator\\\">=</span> AtomicIntegerFieldUpdater<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">newUpdater</span><span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">private</span> String name<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">volatile</span> <span class=\\\"token keyword\\\">int</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">User</span><span class=\\\"token punctuation\\\">(</span>String name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">=</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> String <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> String<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"User[name: %s, id: %s]\\\"</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">,</span> id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>Object obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span>obj <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            User o <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">)</span> obj<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> o<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> o<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">==</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">53</span> <span class=\\\"token operator\\\">+</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        User user1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"u1\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndIncrement</span><span class=\\\"token punctuation\\\">(</span>user1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>user1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>代码输出:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>10\\n11</code></pre>\\n      </div>\",\"tableOfContents\":\"<ul>\\n<li><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\\\">原子更新基本类型</a></li>\\n<li><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E6%95%B0%E7%BB%84\\\">原子更新数组</a></li>\\n<li>\\n<p><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\\\">原子更新引用类型</a></p>\\n<ul>\\n<li><a href=\\\"#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\">代码示例</a></li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5\\\">原子更新字段</a></p>\\n<ul>\\n<li><a href=\\\"#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B-1\\\">代码示例</a></li>\\n</ul>\\n</li>\\n</ul>\",\"frontmatter\":{\"title\":\"Java中的原子操作类\",\"date\":\"December 25, 2017\",\"tags\":[\"java\"]}}},\"pathContext\":{\"path\":\"/java-atomic\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---java-atomic-45770a5f8e92eaa5464b.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Note Site\",\"author\":\"stone\"}},\"markdownRemark\":{\"id\":\"/home/peng/develop/workspace/stone-site/src/pages/2018-01-02-java-atomic/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2 id=\\\"原子更新基本类型\\\"><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>原子更新基本类型</h2>\\n<ul>\\n<li>AtomicInteger 原子更新整形</li>\\n<li>AtomicBoolean 原子更新布尔类型</li>\\n<li>AtomicLong 原子更新长整形</li>\\n<li>对于其他基本类型<code>double</code>,<code>float</code>,<code>byte</code>,<code>char</code>没有相应的原子更新类,因为其相应的更新类均可以使用以上三个类进行包装得到,如<code>byte</code>和<code>char</code>可简单包装为整形,\\n<code>float</code>可以使用<code>Float.floatToIntBits</code>转化为整形,\\n<code>double</code>可以使用<code>Double.doubleToLongBits</code>转化为长整形</li>\\n</ul>\\n<p>AtomicInteger</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AtomicInteger</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Number</span> <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">java<span class=\\\"token punctuation\\\">.</span>io<span class=\\\"token punctuation\\\">.</span>Serializable</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">AtomicInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> initialValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        value <span class=\\\"token operator\\\">=</span> initialValue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">AtomicInteger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        value <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 最终设置成新值,使用lazySet设置值之后,\\n     * 可能导致其他线程在之后的一小段时间内还是读取旧的值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lazySet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">putOrderedInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 设置新值并返回旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndSet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndSetInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 若当前值等于期望值,则设置为新值\\n     * @return 是否更新成功,即当前值是否等于期望值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> expect<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> update<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSwapInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> expect<span class=\\\"token punctuation\\\">,</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 过期的方法,实现与compareAndSet相同\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">weakCompareAndSet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> expect<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> update<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSwapInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> expect<span class=\\\"token punctuation\\\">,</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i++\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndIncrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i--\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndDecrement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i += n, return old i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndAdd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> delta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> delta<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * ++i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">incrementAndGet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * --i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">decrementAndGet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i += n, return updated i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">addAndGet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> delta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndAddInt</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> delta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> delta<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个函数来更新数值,此函数应该是无副作用的,因为它可能被调用多次\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndUpdate</span><span class=\\\"token punctuation\\\">(</span>IntUnaryOperator updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个函数来更新数值,此函数应该是无副作用的,因为它可能被调用多次\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">updateAndGet</span><span class=\\\"token punctuation\\\">(</span>IntUnaryOperator updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的,需要两个参数的函数\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndAccumulate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">,</span>\\n                                      IntBinaryOperator accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的,需要两个参数的函数\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">accumulateAndGet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">,</span>\\n                                      IntBinaryOperator accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"原子更新数组\\\"><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E6%95%B0%E7%BB%84\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>原子更新数组</h2>\\n<ul>\\n<li>AtomicIntegerArray: 原子更新整形数组中的元素</li>\\n<li>AtomicLongArray: 原子更新长整型数组里的元素</li>\\n<li>AtomicReferenceArray: 原子更新引用类型数组里的元素</li>\\n</ul>\\n<h2 id=\\\"原子更新引用类型\\\"><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>原子更新引用类型</h2>\\n<ul>\\n<li>AtomicReference</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AtomicReference</span><span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">java<span class=\\\"token punctuation\\\">.</span>io<span class=\\\"token punctuation\\\">.</span>Serializable</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 构造函数,附带初始值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">AtomicReference</span><span class=\\\"token punctuation\\\">(</span>V initialValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        value <span class=\\\"token operator\\\">=</span> initialValue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 构造函数,初始值为null\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">AtomicReference</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 返回当前值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 设置新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span>V newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        value <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 最终设置为新值,之前有一段时间可能为旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lazySet</span><span class=\\\"token punctuation\\\">(</span>V newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">putOrderedObject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * CAS,注意期望值必须{@code ==}当前值,若只是{@code equals}将会判定为不等\\n     * @return 是否成功\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>V expect<span class=\\\"token punctuation\\\">,</span> V update<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSwapObject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> expect<span class=\\\"token punctuation\\\">,</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 过期函数,实现与CAS相同\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">weakCompareAndSet</span><span class=\\\"token punctuation\\\">(</span>V expect<span class=\\\"token punctuation\\\">,</span> V update<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSwapObject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> expect<span class=\\\"token punctuation\\\">,</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 设置新值,返回旧值\\n     */</span>\\n    <span class=\\\"token annotation punctuation\\\">@SuppressWarnings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unchecked\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">getAndSet</span><span class=\\\"token punctuation\\\">(</span>V newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>V<span class=\\\"token punctuation\\\">)</span>unsafe<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndSetObject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> valueOffset<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的函数,修改当前值为新值\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">getAndUpdate</span><span class=\\\"token punctuation\\\">(</span>UnaryOperator<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        V prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的函数,修改当前值为新值\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">updateAndGet</span><span class=\\\"token punctuation\\\">(</span>UnaryOperator<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        V prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个操作值和一个二元操作函数,计算得到新值\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">getAndAccumulate</span><span class=\\\"token punctuation\\\">(</span>V x<span class=\\\"token punctuation\\\">,</span>\\n                                    BinaryOperator<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        V prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个操作值和一个二元操作函数,计算得到新值\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> V <span class=\\\"token function\\\">accumulateAndGet</span><span class=\\\"token punctuation\\\">(</span>V x<span class=\\\"token punctuation\\\">,</span>\\n                                    BinaryOperator<span class=\\\"token operator\\\">&lt;</span>V<span class=\\\"token operator\\\">></span> accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        V prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"代码示例\\\"><a href=\\\"#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>代码示例</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>atomic<span class=\\\"token punctuation\\\">.</span>AtomicReference<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AtomicReferenceTest</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> AtomicReference<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token operator\\\">></span> userAtomicReference <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">AtomicReference</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">private</span> String name<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">int</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">User</span><span class=\\\"token punctuation\\\">(</span>String name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">=</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> String <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> String<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"User[name: %s, id: %s]\\\"</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">,</span> id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>Object obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span>obj <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            User o <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">)</span> obj<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> o<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> o<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">==</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">53</span> <span class=\\\"token operator\\\">+</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        User user1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"u1\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        User user2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"u2\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        User user3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"u1\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span>user1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> user1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> user3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// false</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>user3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// true</span>\\n\\n        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 使用user3做CAS,更新失败</span>\\n        userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>user3<span class=\\\"token punctuation\\\">,</span> user2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 使用user1做CAS,更新成功</span>\\n        userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>user1<span class=\\\"token punctuation\\\">,</span> user2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>userAtomicReference<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>输出为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>true\\nfalse\\ntrue\\nUser[name: u1, id: 10]\\nUser[name: u2, id: 12]</code></pre>\\n      </div>\\n<h2 id=\\\"原子更新字段\\\"><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>原子更新字段</h2>\\n<ul>\\n<li>AtomicIntegerFieldUpdater: 原子更新整型的字段的更新器</li>\\n<li>AtomicLongFieldUpdater: 原子更新长整型字段的更新器</li>\\n<li>AtomicStampedReference: 原子更新带有版本号的引用类型.该类将整数值与引用关联起来,可用于原子的更新数据和数据的版本号,可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AtomicIntegerFieldUpdater</span><span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 静态方法,用于构建一个更新器对象\\n     * @param tclass 需要被更新的类\\n     * @param fieldName 需要被更新的字段\\n     */</span>\\n    <span class=\\\"token annotation punctuation\\\">@CallerSensitive</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token operator\\\">&lt;</span>U<span class=\\\"token operator\\\">></span> AtomicIntegerFieldUpdater<span class=\\\"token operator\\\">&lt;</span>U<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">newUpdater</span><span class=\\\"token punctuation\\\">(</span>Class<span class=\\\"token operator\\\">&lt;</span>U<span class=\\\"token operator\\\">></span> tclass<span class=\\\"token punctuation\\\">,</span>\\n                                                              String fieldName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">AtomicIntegerFieldUpdaterImpl</span><span class=\\\"token operator\\\">&lt;</span>U<span class=\\\"token operator\\\">></span>\\n            <span class=\\\"token punctuation\\\">(</span>tclass<span class=\\\"token punctuation\\\">,</span> fieldName<span class=\\\"token punctuation\\\">,</span> Reflection<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getCallerClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * CAS\\n     * @param obj An object whose field to conditionally set\\n     * @param expect the expected value\\n     * @param update the new value\\n     * @return 是否更新成功\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> expect<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 过期方法,作用同CAS\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">weakCompareAndSet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> expect<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 设置新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 最终设置为新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">lazySet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 获得值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 设置新值,返回旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndSet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i++\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndIncrement</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i--\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndDecrement</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i += n, 返回旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndAdd</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> delta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">+</span> delta<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * ++i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">incrementAndGet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * --i\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">decrementAndGet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * i += n, 返回新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">addAndGet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> delta<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> prev <span class=\\\"token operator\\\">+</span> delta<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的函数用于更新值\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndUpdate</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> IntUnaryOperator updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个无副作用的函数用于更新值\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">updateAndGet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> IntUnaryOperator updateFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> updateFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个操作数和二元操作函数用于计算新值\\n     * @return 旧值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">getAndAccumulate</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">,</span>\\n                                      IntBinaryOperator accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> prev<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * 传入一个操作数和二元操作函数用于计算新值\\n     * @return 新值\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">accumulateAndGet</span><span class=\\\"token punctuation\\\">(</span>T obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> x<span class=\\\"token punctuation\\\">,</span>\\n                                      IntBinaryOperator accumulatorFunction<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            next <span class=\\\"token operator\\\">=</span> accumulatorFunction<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyAsInt</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compareAndSet</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> prev<span class=\\\"token punctuation\\\">,</span> next<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> next<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"代码示例-1\\\"><a href=\\\"#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>代码示例</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">import</span> java<span class=\\\"token punctuation\\\">.</span>util<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>atomic<span class=\\\"token punctuation\\\">.</span>AtomicIntegerFieldUpdater<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">AtomicIntegerFieldUpdaterTest</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> AtomicIntegerFieldUpdater<span class=\\\"token operator\\\">&lt;</span>User<span class=\\\"token operator\\\">></span> a <span class=\\\"token operator\\\">=</span> AtomicIntegerFieldUpdater<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">newUpdater</span><span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"id\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">private</span> String name<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">volatile</span> <span class=\\\"token keyword\\\">int</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">User</span><span class=\\\"token punctuation\\\">(</span>String name<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> id<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">=</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> String <span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> String<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">format</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"User[name: %s, id: %s]\\\"</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">,</span> id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>Object obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span>obj <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            User o <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">)</span> obj<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> o<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> o<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;&amp;</span> o<span class=\\\"token punctuation\\\">.</span>id <span class=\\\"token operator\\\">==</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token annotation punctuation\\\">@Override</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hashCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">53</span> <span class=\\\"token operator\\\">+</span> id<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        User user1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"u1\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getAndIncrement</span><span class=\\\"token punctuation\\\">(</span>user1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>user1<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>代码输出:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>10\\n11</code></pre>\\n      </div>\",\"tableOfContents\":\"<ul>\\n<li><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\\\">原子更新基本类型</a></li>\\n<li><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E6%95%B0%E7%BB%84\\\">原子更新数组</a></li>\\n<li>\\n<p><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\\\">原子更新引用类型</a></p>\\n<ul>\\n<li><a href=\\\"#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\\\">代码示例</a></li>\\n</ul>\\n</li>\\n<li>\\n<p><a href=\\\"#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5\\\">原子更新字段</a></p>\\n<ul>\\n<li><a href=\\\"#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B-1\\\">代码示例</a></li>\\n</ul>\\n</li>\\n</ul>\",\"frontmatter\":{\"title\":\"Java中的原子操作类\",\"date\":\"December 25, 2017\",\"tags\":[\"java\"]}}},\"pathContext\":{\"path\":\"/java-atomic\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/java-atomic.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/java-atomic.json\n// module chunks = 930173780009414900"],"sourceRoot":""}