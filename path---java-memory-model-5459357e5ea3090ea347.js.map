{"version":3,"sources":["webpack:///path---java-memory-model-5459357e5ea3090ea347.js","webpack:///./.cache/json/java-memory-model.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/java-memory-model.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","tags","pathContext","path"],"mappings":"AAAAA,cAAc,qBAERC,2EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,YAAAC,OAAA,UAAsCC,gBAAmBC,GAAA,6HAAAC,KAAA,qqSAA+gTC,aAAkKL,MAAA,oBAAAM,KAAA,oBAAAC,MAAA,iBAA+EC,aAAgBC,KAAA","file":"path---java-memory-model-5459357e5ea3090ea347.js","sourcesContent":["webpackJsonp([11402648288945498000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/java-memory-model.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Note Site\",\"author\":\"stone\"}},\"markdownRemark\":{\"id\":\"/home/peng/develop/workspace/stone-site/src/pages/2017-11-14-java-memory-model/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>Java Memory Model</h1>\\n<p>从JDK5开始，java使用新的JSR -133内存模型（本文除非特别说明，针对的都是JSR- 133内存模型）\\nJSR-133提出了happens-before的概念，通过这个概念来阐述操作之间的内存可见性。\\n如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。\\n这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。 与程序员密切相关的happens-before规则如下：</p>\\n<ul>\\n<li>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li>\\n<li>监视器锁规则：对一个监视器锁的解锁，happens-before于随后对这个监视器锁的加锁。</li>\\n<li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li>\\n<li>传递性：如果A happens-before B，且B happens-before C，那么A happens- before C。</li>\\n</ul>\\n<p><a href=\\\"http://www.infoq.com/cn/articles/java-memory-model-1\\\">深入理解Java内存模型（一）——基础</a>\\n<a href=\\\"https://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf\\\">jsr133</a>\\n[Java 并发编程实战]</p>\\n<h1>Eager Initialization</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@ThreadSafe</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Resource</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> Resource resource <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Resource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> resource<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Unsafe lazy initialization</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@NotThreadSafe</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Resource</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> Resource resource<span class=\\\"token punctuation\\\">;</span>\\n \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Resource <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>resource <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            resource <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Resource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> resource<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Safe lazy initialization</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@ThreadSafe</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Resource</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> Resource resource<span class=\\\"token punctuation\\\">;</span>\\n \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">synchronized</span> <span class=\\\"token keyword\\\">static</span> Resource <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>resource <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            resource <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Resource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> resource<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>double checked lock</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@NotThreadSafe</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Resource</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> Resource resource<span class=\\\"token punctuation\\\">;</span>\\n \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Resource <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>resource <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// first check</span>\\n            <span class=\\\"token keyword\\\">synchronized</span><span class=\\\"token punctuation\\\">(</span>Resource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>resource <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// second check</span>\\n                    resource <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Resource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> resource<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>placeholder</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@ThreadSafe</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Resource</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ResourceHolder</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> Resource resource <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Resource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Resource <span class=\\\"token function\\\">getResource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> resource<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> ResourceHolder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getResource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><a href=\\\"http://wiki.jikexueyuan.com/project/java-concurrent/java-memory-model.html\\\">极客学院 内存模型</a></p>\",\"frontmatter\":{\"title\":\"Java Memory Model\",\"date\":\"November 14, 2017\",\"tags\":[\"java\",\"jvm\"]}}},\"pathContext\":{\"path\":\"/java-memory-model\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---java-memory-model-5459357e5ea3090ea347.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Note Site\",\"author\":\"stone\"}},\"markdownRemark\":{\"id\":\"/home/peng/develop/workspace/stone-site/src/pages/2017-11-14-java-memory-model/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>Java Memory Model</h1>\\n<p>从JDK5开始，java使用新的JSR -133内存模型（本文除非特别说明，针对的都是JSR- 133内存模型）\\nJSR-133提出了happens-before的概念，通过这个概念来阐述操作之间的内存可见性。\\n如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。\\n这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。 与程序员密切相关的happens-before规则如下：</p>\\n<ul>\\n<li>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li>\\n<li>监视器锁规则：对一个监视器锁的解锁，happens-before于随后对这个监视器锁的加锁。</li>\\n<li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li>\\n<li>传递性：如果A happens-before B，且B happens-before C，那么A happens- before C。</li>\\n</ul>\\n<p><a href=\\\"http://www.infoq.com/cn/articles/java-memory-model-1\\\">深入理解Java内存模型（一）——基础</a>\\n<a href=\\\"https://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf\\\">jsr133</a>\\n[Java 并发编程实战]</p>\\n<h1>Eager Initialization</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@ThreadSafe</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Resource</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> Resource resource <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Resource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> resource<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Unsafe lazy initialization</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@NotThreadSafe</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Resource</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> Resource resource<span class=\\\"token punctuation\\\">;</span>\\n \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Resource <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>resource <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            resource <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Resource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> resource<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>Safe lazy initialization</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@ThreadSafe</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Resource</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> Resource resource<span class=\\\"token punctuation\\\">;</span>\\n \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">synchronized</span> <span class=\\\"token keyword\\\">static</span> Resource <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>resource <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            resource <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Resource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> resource<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>double checked lock</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@NotThreadSafe</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Resource</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> Resource resource<span class=\\\"token punctuation\\\">;</span>\\n \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Resource <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>resource <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// first check</span>\\n            <span class=\\\"token keyword\\\">synchronized</span><span class=\\\"token punctuation\\\">(</span>Resource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>resource <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// second check</span>\\n                    resource <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Resource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> resource<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>placeholder</h1>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@ThreadSafe</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Resource</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ResourceHolder</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">static</span> Resource resource <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Resource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> Resource <span class=\\\"token function\\\">getResource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> resource<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">getInstance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> ResourceHolder<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getResource</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><a href=\\\"http://wiki.jikexueyuan.com/project/java-concurrent/java-memory-model.html\\\">极客学院 内存模型</a></p>\",\"frontmatter\":{\"title\":\"Java Memory Model\",\"date\":\"November 14, 2017\",\"tags\":[\"java\",\"jvm\"]}}},\"pathContext\":{\"path\":\"/java-memory-model\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/java-memory-model.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/java-memory-model.json\n// module chunks = 11402648288945498000"],"sourceRoot":""}