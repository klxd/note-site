webpackJsonp([0xc6b2612695c6b800],{"./node_modules/json-loader/index.js!./.cache/json/java-thread.json":function(n,s){n.exports={data:{site:{siteMetadata:{title:"Note Site",author:"stone"}},markdownRemark:{id:"/home/peng/develop/workspace/stone-site/src/pages/2017-11-18-java-thread/index.md absPath of file >>> MarkdownRemark",html:'<h1 id="thread"><a href="#thread" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Thread</h1>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token comment" spellcheck="true">// java8的函数式接口</span>\n<span class="token annotation punctuation">@FunctionalInterface</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span>\n<span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// 实现了Runnable接口,又聚合了一个Runnable实例</span>\n    <span class="token keyword">private</span> Runnable target<span class="token punctuation">;</span>\n    \n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Java中的线程在运行的生命在周期中可能处于以下6个状态之一</p>\n<ul>\n<li>new 初始状态,线程被构建,但是还没有调用start()方法</li>\n<li>runnable 运行状态,Java线程将操作系统中的<em>就绪</em>和<em>运行</em>两种状态都笼统的称作<em>运行中</em></li>\n<li>blocked 阻塞状态,表示线程阻塞于<em>锁</em></li>\n<li>waiting 等待状态,表示线程进入等待状态,进入该状态表示当前线程需要等待其他线程作出一些特定动作(<em>通知</em>或<em>中断</em>)</li>\n<li>time-waiting 超时等待状态,该状态不同于waiting,它是可以在指定时间的自行返回的(比如自己sleep一定的时间)</li>\n<li>terminated 终止状态,表示当前线程已经执行完毕</li>\n</ul>\n<p><a href="/d2d65de3a30bc6a2a17dd2aa6e8be0b4.png">thread-state</a>\n注意: 线程阻塞在进入synchronized关键字锁时的状态是<em>阻塞状态</em>,\n而阻塞在Lock接口时的状态是<em>等待状态</em>.\n</p>\n<h2 id="daemon线程-后台线程守护线程"><a href="#daemon%E7%BA%BF%E7%A8%8B-%E5%90%8E%E5%8F%B0%E7%BA%BF%E7%A8%8B%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Daemon线程 (后台线程,守护线程)</h2>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">/* Whether or not the thread is a daemon thread. */</span>\n    <span class="token keyword">private</span> <span class="token keyword">boolean</span> daemon <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> on<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        daemon <span class="token operator">=</span> on<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> daemon<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>Daemon线程是一种支持型线程,主要用于程序中的后台调度和支持型工作</li>\n<li>不是程序中不可或缺的一部分,当所有的非Daemon线程退出的时候,JVM将会退出</li>\n<li>Daemon属性需要在启动线程之前设置</li>\n<li>Daemon线程中的finally块并不一定会执行</li>\n<li>由Daemon线程创建的任务子线程都会被自动设置成后台线程</li>\n</ul>\n<h2 id="init-线程初始化"><a href="#init-%E7%BA%BF%E7%A8%8B%E5%88%9D%E5%A7%8B%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>init() 线程初始化</h2>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ThreadGroup g<span class="token punctuation">,</span> Runnable target<span class="token punctuation">,</span> String name<span class="token punctuation">,</span>\n                      <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> AccessControlContext acc<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"name cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token comment" spellcheck="true">// -- 将当前线程设为新建线程的父线程</span>\n        Thread parent <span class="token operator">=</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        SecurityManager security <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment" spellcheck="true">/* Determine if it\'s an applet or not */</span>\n\n            <span class="token comment" spellcheck="true">/* If there is a security manager, ask the security manager\n               what to do. */</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                g <span class="token operator">=</span> security<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token comment" spellcheck="true">/* If the security doesn\'t have a strong opinion of the matter\n               use the parent thread group. */</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                g <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment" spellcheck="true">/* checkAccess regardless of whether or not threadgroup is\n           explicitly passed in. */</span>\n        g<span class="token punctuation">.</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment" spellcheck="true">/*\n         * Do we have the required permissions?\n         */</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCCLOverridden</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                security<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span>SUBCLASS_IMPLEMENTATION_PERMISSION<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        g<span class="token punctuation">.</span><span class="token function">addUnstarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> g<span class="token punctuation">;</span>\n        <span class="token comment" spellcheck="true">// -- 将daemon和priority属性设置为父线程对应属性</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>daemon <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">isCCLOverridden</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>contextClassLoader <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">else</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>contextClassLoader <span class="token operator">=</span> parent<span class="token punctuation">.</span>contextClassLoader<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>inheritedAccessControlContext <span class="token operator">=</span>\n                acc <span class="token operator">!=</span> null <span class="token operator">?</span> acc <span class="token operator">:</span> AccessController<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>\n        <span class="token function">setPriority</span><span class="token punctuation">(</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment" spellcheck="true">// -- 将父线程的inheritableThreadLocals复制过来</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">!=</span> null<span class="token punctuation">)</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span>\n                ThreadLocal<span class="token punctuation">.</span><span class="token function">createInheritedMap</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment" spellcheck="true">/* Stash the specified stack size in case the VM cares */</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>stackSize <span class="token operator">=</span> stackSize<span class="token punctuation">;</span>\n\n        <span class="token comment" spellcheck="true">// -- 分配线程ID</span>\n        <span class="token comment" spellcheck="true">/* Set thread ID */</span>\n        tid <span class="token operator">=</span> <span class="token function">nextThreadID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2 id="start-启动线程"><a href="#start-%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>start 启动线程</h2>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">/**\n     * This method is not invoked for the main method thread or "system"\n     * group threads created/set up by the VM. Any new functionality added\n     * to this method in the future may have to also be added to the VM.\n     *\n     * A zero status value corresponds to state "NEW".\n     */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment" spellcheck="true">/* Notify the group that this thread is about to be started\n     * so that it can be added to the group\'s list of threads\n     * and the group\'s unstarted count can be decremented. */</span>\n    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment" spellcheck="true">/* do nothing. If start0 threw a Throwable then\n              it will be passed up the call stack */</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<ul>\n<li>start()方法的含义: 当前线程(即parent线程)<em>同步</em>告诉虚拟机,只要线程规划器空闲,\n应立即启动调用start()方法的线程</li>\n</ul>\n<h2 id="中断"><a href="#%E4%B8%AD%E6%96%AD" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>中断</h2>\n<h2 id="等待--通知"><a href="#%E7%AD%89%E5%BE%85--%E9%80%9A%E7%9F%A5" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>等待 &#x26; 通知</h2>\n<p>问题引入: 锁(synchronized)的互斥机制同步了线程之间的行为,解决了线程之间相互干涉的问题,\n但是没有解决线程之间的协作问题(比如某些部分的工作必须在其他部分被解决之前解决).\n本质问题是如何实现:一个线程(生产者)修改了一个对象的值(完成某些工作),而让另一个线程(消费者)感知到变化.\n简单的实现方法是让消费者线程</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token comment" spellcheck="true">// 简单的实现: 让消费者线程不断循环检查变量是否符合预期</span>\n<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>syncObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> desire<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment" spellcheck="true">// doSomething()</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>以上实现存在如下问题:</p>\n<ul>\n<li>难以确保及时性.在睡眠时,基本不消耗处理器资源,但是如果睡的太久,就不能及时对变化作出相应</li>\n<li>难以降低开销.如果降低睡眠的时间,比如休眠一毫秒,这样能迅速发现变化,但是相当于退化成空循环,\n即是<em>忙等待</em>,这通常是一种不良的CPU周期使用方式.</li>\n<li>在互斥块中,调用sleep和yield并不会释放锁,这意味着其他线程并不能获得锁并协作本线程</li>\n</ul>\n<p>以上问题能够使用Java内置的<em>等待-通知</em>机制解决,此机制的使用方法定义在基类Object上,\n相关方法如下:</p>\n<ul>\n<li>notify() 通知一个在对象上等待的线程,使其重wait()方法返回,\n而返回的前提是该线程获取到了对象的锁,调用notify不会释放锁</li>\n<li>notifyAll() 通知所有等待在该对象上的线程,调用notifyAll不会释放锁</li>\n<li>wait() 调用该方法的线程进入waiting状态,只有等待另外线程的通知或者被中断才会返回,\n需要注意的是,调用wait()方法后,会释放对象的锁</li>\n<li>wait(long) 超时等待一段时间,这里的参数时间是毫秒,也就是等待长达n毫秒,\n如果没有通知就超时返回</li>\n<li>wait(long, int) 对超时时间更细粒度的控制,可以达到纳秒</li>\n</ul>\n<p>为什么以上<em>等待-通知</em>机制的方法放在Object中?</p>\n<ul>\n<li>同步块中的锁是其所有对象的一部分,可以把wait放进任何同步控制方法里,\n而不用考虑这个类是否继承Thread或是实现了Runnable</li>\n<li>实际上,只能在同步方法或同步块中使用以上函数,而sleep可以在非同步块中使用(不用操作锁)</li>\n<li>如果在非同步块中使用以上方法,可以通过编译,但是会在运行时抛出异常</li>\n</ul>\n<p><a href="/387b6f50970ed2c9498d75ea5eb7acf9.java">例子:WaitNotify</a>\n使用细节</p>\n<ul>\n<li>使用wait,notify和notifyAll时需要先对调用对象加锁</li>\n<li>调用wait方法后,线程状态由running变为waiting,并将当前线程放到对象的等待队列</li>\n<li>notify或是notifyAll方法调用后,等待线程依旧不会从wait返回,\n需要调用notify或notifyA的线程释放了锁之后,等待线程才有机会从wait返回</li>\n<li>notify方法将等待队列的一个等待线程从等待队列移到同步队列中,\n而notifyAll方法则是将等待队列中所有线程全部移动到同步队列,\n被移动的线程状态由waiting变为blocked</li>\n<li>从wait方法返回的前提是获得了调用对象的锁</li>\n</ul>\n<p>对应的伪代码如下</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token comment" spellcheck="true">// waiting thread</span>\n<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>syncObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> desire<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        syncObject<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment" spellcheck="true">// do something</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// notify thread</span>\n<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>syncObject<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// change value</span>\n    syncObject<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2 id="join"><a href="#join" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>join</h2>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token comment" spellcheck="true">/**\n * join方法会对线程对象本身上锁\n * @param millis 最长等待时间\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span>\n<span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>\n    <span class="token keyword">long</span> base <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"timeout value is negative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>millis <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment" spellcheck="true">// 父类Object上的方法,参数0表示没有超时时间</span>\n            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">long</span> delay <span class="token operator">=</span> millis <span class="token operator">-</span> now<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment" spellcheck="true">// 父类Object上的方法,参数delay为超时时间</span>\n            <span class="token function">wait</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> base<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>\n    <span class="token function">join</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ul>\n<li>如果一个线程a执行了b.join(),其含义是:当前线程a等待b线程终止之后才从b.join()返回</li>\n<li>join(long millis)表示:如果线程b在给定的超时时间里没有终止,那么将会从该超时方法中返回</li>\n</ul>',
tableOfContents:'<ul>\n<li>\n<p><a href="#thread">Thread</a></p>\n<ul>\n<li><a href="#daemon%E7%BA%BF%E7%A8%8B-%E5%90%8E%E5%8F%B0%E7%BA%BF%E7%A8%8B%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B">Daemon线程 (后台线程,守护线程)</a></li>\n<li><a href="#init-%E7%BA%BF%E7%A8%8B%E5%88%9D%E5%A7%8B%E5%8C%96">init() 线程初始化</a></li>\n<li><a href="#start-%E5%90%AF%E5%8A%A8%E7%BA%BF%E7%A8%8B">start 启动线程</a></li>\n<li><a href="#%E4%B8%AD%E6%96%AD">中断</a></li>\n<li><a href="#%E7%AD%89%E5%BE%85--%E9%80%9A%E7%9F%A5">等待 &#x26; 通知</a></li>\n<li><a href="#join">join</a></li>\n</ul>\n</li>\n</ul>',frontmatter:{title:"Java Thread",date:"November 17, 2017",tags:["java"]}}},pathContext:{path:"/java-thread"}}}});
//# sourceMappingURL=path---java-thread-c187c16642a6bf7fba46.js.map