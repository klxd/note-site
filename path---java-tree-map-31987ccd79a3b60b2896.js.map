{"version":3,"sources":["webpack:///path---java-tree-map-31987ccd79a3b60b2896.js","webpack:///./.cache/json/java-tree-map.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/java-tree-map.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path"],"mappings":"AAAAA,cAAc,qBAERC,uEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,YAAAC,OAAA,UAAsCC,gBAAmBC,GAAA,yHAAAC,KAAA,+mvBAA8mxBC,aAAiLL,MAAA,eAAAM,KAAA,uBAAoDC,aAAgBC,KAAA","file":"path---java-tree-map-31987ccd79a3b60b2896.js","sourcesContent":["webpackJsonp([5276986228162747000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/java-tree-map.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Note Site\",\"author\":\"stone\"}},\"markdownRemark\":{\"id\":\"/home/peng/develop/workspace/stone-site/src/pages/2017-11-10-java-tree-map/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>Java TreeMap</h1>\\n<ul>\\n<li>实现了SortedMap接口,会按照key的大小对map中的元素进行排序</li>\\n<li>未实现同步(不是线程安全)</li>\\n<li>key不允许为空</li>\\n<li>底层使用红黑树实现</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TreeMap</span><span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractMap</span><span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">NavigableMap</span><span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> Cloneable<span class=\\\"token punctuation\\\">,</span> java<span class=\\\"token punctuation\\\">.</span>io<span class=\\\"token punctuation\\\">.</span>Serializable\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * The comparator used to maintain order in this tree map, or\\n     * null if it uses the natural ordering of its keys.\\n     * -- 对于key的一个比较器,为空则使用key的自然顺序\\n     * @serial\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> Comparator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span> comparator<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -- 红黑树的根节点</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">transient</span> Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> root<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * The number of entries in the tree\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">transient</span> <span class=\\\"token keyword\\\">int</span> size <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * The number of structural modifications to the tree.\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">transient</span> <span class=\\\"token keyword\\\">int</span> modCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>红黑树</h2>\\n<p>＞红黑树是一种近似平衡的二叉查找树，它能够确保任何一个节点的左右子树的高度差不会超过二者中较低那个的一陪。\\n＞具体来说，红黑树是满足如下条件的二叉查找树（binary search tree）：</p>\\n<ul>\\n<li>每个节点要么是红色，要么是黑色。</li>\\n<li>根节点必须是黑色</li>\\n<li>红色节点不能连续（也即是，红色节点的孩子和父亲都不能是红色）。</li>\\n<li>对于每个节点，从该点至null（树尾端）的任何路径，都含有相同个数的黑色节点</li>\\n</ul>\\n<h2>Entry</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Entry</span><span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">Map<span class=\\\"token punctuation\\\">.</span>Entry</span><span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    K key<span class=\\\"token punctuation\\\">;</span>\\n    V value<span class=\\\"token punctuation\\\">;</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> left<span class=\\\"token punctuation\\\">;</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> right<span class=\\\"token punctuation\\\">;</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> parent<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">boolean</span> color <span class=\\\"token operator\\\">=</span> BLACK<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>get()</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> V <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>Object key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getEntry</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token operator\\\">==</span>null <span class=\\\"token operator\\\">?</span> null <span class=\\\"token operator\\\">:</span> p<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">final</span> Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">getEntry</span><span class=\\\"token punctuation\\\">(</span>Object key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Offload comparator-based version for sake of performance</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>comparator <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -- 使用comparator寻找</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">getEntryUsingComparator</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span>　<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -- 不允许key为空</span>\\n        <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NullPointerException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token annotation punctuation\\\">@SuppressWarnings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unchecked\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    Comparable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span> k <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>Comparable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> key<span class=\\\"token punctuation\\\">;</span>　<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -- 使用自然顺序</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> p <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> cmp <span class=\\\"token operator\\\">=</span> k<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareTo</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            p <span class=\\\"token operator\\\">=</span> p<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            p <span class=\\\"token operator\\\">=</span> p<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">else</span>\\n            <span class=\\\"token keyword\\\">return</span> p<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">final</span> Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">getEntryUsingComparator</span><span class=\\\"token punctuation\\\">(</span>Object key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token annotation punctuation\\\">@SuppressWarnings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unchecked\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n        K k <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>K<span class=\\\"token punctuation\\\">)</span> key<span class=\\\"token punctuation\\\">;</span>\\n    Comparator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span> cpr <span class=\\\"token operator\\\">=</span> comparator<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cpr <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> p <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">int</span> cmp <span class=\\\"token operator\\\">=</span> cpr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compare</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">,</span> p<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                p <span class=\\\"token operator\\\">=</span> p<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                p <span class=\\\"token operator\\\">=</span> p<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token keyword\\\">return</span> p<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>根据比较器顺序或者元素的自然顺序,对二叉树进行查找</li>\\n<li>直到满足<code>cmp = k.compareTo(p.key) == 0</code>的entry</li>\\n</ul>\\n<h2>put()</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> V <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span>K key<span class=\\\"token punctuation\\\">,</span> V value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> t <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -- 若root为空,则put为根节点</span>\\n        <span class=\\\"token function\\\">compare</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// type (and possibly null) check</span>\\n\\n        root <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Entry</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">,</span> null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        size <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        modCount<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">int</span> cmp<span class=\\\"token punctuation\\\">;</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> parent<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// split comparator and comparable paths</span>\\n    Comparator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span> cpr <span class=\\\"token operator\\\">=</span> comparator<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cpr <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            parent <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n            cmp <span class=\\\"token operator\\\">=</span> cpr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compare</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> t<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token keyword\\\">return</span> t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setValue</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NullPointerException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token annotation punctuation\\\">@SuppressWarnings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unchecked\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            Comparable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span> k <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>Comparable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> key<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            parent <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n            cmp <span class=\\\"token operator\\\">=</span> k<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareTo</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token keyword\\\">return</span> t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setValue</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> e <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Entry</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">,</span> parent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n        parent<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">else</span>\\n        parent<span class=\\\"token punctuation\\\">.</span>right <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">fixAfterInsertion</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    size<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    modCount<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>对map做一次查找,若找到对应的key(<code>k.compareTo(t.key) == 0</code>),则将其value赋为新值,返回旧值</li>\\n<li>若找不到,新建一个entry将其插入到合适的位置(使用查找时记录的<code>parent</code>)</li>\\n<li>调用<code>fixAfterInsertion(newEntry)</code>调整树的结构</li>\\n</ul>\\n<h2>remove</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> V <span class=\\\"token function\\\">remove</span><span class=\\\"token punctuation\\\">(</span>Object key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getEntry</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n\\n    V oldValue <span class=\\\"token operator\\\">=</span> p<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">deleteEntry</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> oldValue<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>调用<code>getEntry()</code>找到key相应的entry</li>\\n<li>调用<code>deleteEntry()</code>删除对应的entry (根据需要调整树的结构)</li>\\n</ul>\",\"frontmatter\":{\"title\":\"Java TreeMap\",\"date\":\"November 10, 2017\"}}},\"pathContext\":{\"path\":\"/java-tree-map\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---java-tree-map-31987ccd79a3b60b2896.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Note Site\",\"author\":\"stone\"}},\"markdownRemark\":{\"id\":\"/home/peng/develop/workspace/stone-site/src/pages/2017-11-10-java-tree-map/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>Java TreeMap</h1>\\n<ul>\\n<li>实现了SortedMap接口,会按照key的大小对map中的元素进行排序</li>\\n<li>未实现同步(不是线程安全)</li>\\n<li>key不允许为空</li>\\n<li>底层使用红黑树实现</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TreeMap</span><span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">AbstractMap</span><span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">NavigableMap</span><span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> Cloneable<span class=\\\"token punctuation\\\">,</span> java<span class=\\\"token punctuation\\\">.</span>io<span class=\\\"token punctuation\\\">.</span>Serializable\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * The comparator used to maintain order in this tree map, or\\n     * null if it uses the natural ordering of its keys.\\n     * -- 对于key的一个比较器,为空则使用key的自然顺序\\n     * @serial\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">final</span> Comparator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span> comparator<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -- 红黑树的根节点</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">transient</span> Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> root<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * The number of entries in the tree\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">transient</span> <span class=\\\"token keyword\\\">int</span> size <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * The number of structural modifications to the tree.\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">transient</span> <span class=\\\"token keyword\\\">int</span> modCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>红黑树</h2>\\n<p>＞红黑树是一种近似平衡的二叉查找树，它能够确保任何一个节点的左右子树的高度差不会超过二者中较低那个的一陪。\\n＞具体来说，红黑树是满足如下条件的二叉查找树（binary search tree）：</p>\\n<ul>\\n<li>每个节点要么是红色，要么是黑色。</li>\\n<li>根节点必须是黑色</li>\\n<li>红色节点不能连续（也即是，红色节点的孩子和父亲都不能是红色）。</li>\\n<li>对于每个节点，从该点至null（树尾端）的任何路径，都含有相同个数的黑色节点</li>\\n</ul>\\n<h2>Entry</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Entry</span><span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">Map<span class=\\\"token punctuation\\\">.</span>Entry</span><span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    K key<span class=\\\"token punctuation\\\">;</span>\\n    V value<span class=\\\"token punctuation\\\">;</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> left<span class=\\\"token punctuation\\\">;</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> right<span class=\\\"token punctuation\\\">;</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> parent<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">boolean</span> color <span class=\\\"token operator\\\">=</span> BLACK<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>get()</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> V <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>Object key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getEntry</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token operator\\\">==</span>null <span class=\\\"token operator\\\">?</span> null <span class=\\\"token operator\\\">:</span> p<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">final</span> Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">getEntry</span><span class=\\\"token punctuation\\\">(</span>Object key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Offload comparator-based version for sake of performance</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>comparator <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -- 使用comparator寻找</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">getEntryUsingComparator</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span>　<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -- 不允许key为空</span>\\n        <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NullPointerException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token annotation punctuation\\\">@SuppressWarnings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unchecked\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    Comparable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span> k <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>Comparable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> key<span class=\\\"token punctuation\\\">;</span>　<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -- 使用自然顺序</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> p <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">int</span> cmp <span class=\\\"token operator\\\">=</span> k<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareTo</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            p <span class=\\\"token operator\\\">=</span> p<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n            p <span class=\\\"token operator\\\">=</span> p<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">else</span>\\n            <span class=\\\"token keyword\\\">return</span> p<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">final</span> Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> <span class=\\\"token function\\\">getEntryUsingComparator</span><span class=\\\"token punctuation\\\">(</span>Object key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token annotation punctuation\\\">@SuppressWarnings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unchecked\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n        K k <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>K<span class=\\\"token punctuation\\\">)</span> key<span class=\\\"token punctuation\\\">;</span>\\n    Comparator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span> cpr <span class=\\\"token operator\\\">=</span> comparator<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cpr <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> p <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">int</span> cmp <span class=\\\"token operator\\\">=</span> cpr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compare</span><span class=\\\"token punctuation\\\">(</span>k<span class=\\\"token punctuation\\\">,</span> p<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                p <span class=\\\"token operator\\\">=</span> p<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                p <span class=\\\"token operator\\\">=</span> p<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token keyword\\\">return</span> p<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>根据比较器顺序或者元素的自然顺序,对二叉树进行查找</li>\\n<li>直到满足<code>cmp = k.compareTo(p.key) == 0</code>的entry</li>\\n</ul>\\n<h2>put()</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> V <span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span>K key<span class=\\\"token punctuation\\\">,</span> V value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> t <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -- 若root为空,则put为根节点</span>\\n        <span class=\\\"token function\\\">compare</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// type (and possibly null) check</span>\\n\\n        root <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Entry</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">,</span> null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        size <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        modCount<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">int</span> cmp<span class=\\\"token punctuation\\\">;</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> parent<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// split comparator and comparable paths</span>\\n    Comparator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span> cpr <span class=\\\"token operator\\\">=</span> comparator<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cpr <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            parent <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n            cmp <span class=\\\"token operator\\\">=</span> cpr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compare</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> t<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token keyword\\\">return</span> t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setValue</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>key <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">NullPointerException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token annotation punctuation\\\">@SuppressWarnings</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"unchecked\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n            Comparable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span> k <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>Comparable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">super</span> K<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> key<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">do</span> <span class=\\\"token punctuation\\\">{</span>\\n            parent <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">;</span>\\n            cmp <span class=\\\"token operator\\\">=</span> k<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">compareTo</span><span class=\\\"token punctuation\\\">(</span>t<span class=\\\"token punctuation\\\">.</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n                t <span class=\\\"token operator\\\">=</span> t<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">else</span>\\n                <span class=\\\"token keyword\\\">return</span> t<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setValue</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>t <span class=\\\"token operator\\\">!=</span> null<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> e <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Entry</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">,</span> parent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cmp <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n        parent<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">else</span>\\n        parent<span class=\\\"token punctuation\\\">.</span>right <span class=\\\"token operator\\\">=</span> e<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">fixAfterInsertion</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    size<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    modCount<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>对map做一次查找,若找到对应的key(<code>k.compareTo(t.key) == 0</code>),则将其value赋为新值,返回旧值</li>\\n<li>若找不到,新建一个entry将其插入到合适的位置(使用查找时记录的<code>parent</code>)</li>\\n<li>调用<code>fixAfterInsertion(newEntry)</code>调整树的结构</li>\\n</ul>\\n<h2>remove</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> V <span class=\\\"token function\\\">remove</span><span class=\\\"token punctuation\\\">(</span>Object key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    Entry<span class=\\\"token operator\\\">&lt;</span>K<span class=\\\"token punctuation\\\">,</span>V<span class=\\\"token operator\\\">></span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getEntry</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>p <span class=\\\"token operator\\\">==</span> null<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">return</span> null<span class=\\\"token punctuation\\\">;</span>\\n\\n    V oldValue <span class=\\\"token operator\\\">=</span> p<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">deleteEntry</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> oldValue<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ul>\\n<li>调用<code>getEntry()</code>找到key相应的entry</li>\\n<li>调用<code>deleteEntry()</code>删除对应的entry (根据需要调整树的结构)</li>\\n</ul>\",\"frontmatter\":{\"title\":\"Java TreeMap\",\"date\":\"November 10, 2017\"}}},\"pathContext\":{\"path\":\"/java-tree-map\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/java-tree-map.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/java-tree-map.json\n// module chunks = 5276986228162747000"],"sourceRoot":""}