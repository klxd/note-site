webpackJsonp([0x3b81e7ccefc6ba0],{"./node_modules/json-loader/index.js!./.cache/json/java-static-vs-transient.json":function(n,s){n.exports={data:{site:{siteMetadata:{title:"Note Site",author:"stone"}},markdownRemark:{id:"/home/peng/develop/workspace/stone-site/src/pages/2017-12-04-java-static-vs-transient/index.md absPath of file >>> MarkdownRemark",html:'<h2 id="起因"><a href="#%E8%B5%B7%E5%9B%A0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>起因</h2>\n<p>今天工作时遇到一个Java序列化对象中带有static字段的问题,\n一时无法确定Java默认的序列化机制会怎么处理静态域,\nGoogle的时候发现<a href="http://javabeginnerstutorial.com/core-java-tutorial/transient-vs-static-variable-java/">以下文章</a>\n此文将static和transient两个关键字做对比,初看时觉得不错,\n但是仔细看时发现文章得出的结论和我的印象中的Java序列化有大出入,\n于是自己动手写代码验证一下.</p>\n<h2 id="static域会不会被序列化"><a href="#static%E5%9F%9F%E4%BC%9A%E4%B8%8D%E4%BC%9A%E8%A2%AB%E5%BA%8F%E5%88%97%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>static域会不会被序列化</h2>\n<p>改文章中的第二部分通过一段代码得出以下<em>结论</em>:</p>\n<blockquote>\n<ol>\n<li>Static variables value can be stored\nwhile serializing if the same is provided while initialization.  </li>\n<li>If variable is defined as Static and Transient both,\nthan static modifier will govern the behavior of variable and not Transient.</li>\n</ol>\n</blockquote>\n<p>该文作者认为: </p>\n<ol>\n<li>如果序列化时静态域的值等于初始化时候的值，那么静态域就会被序列化</li>\n<li>如果一个域同时拥有static和transient关键字,那么这个域也会被序列化\n其实以上这个两个结论都是不对的</li>\n</ol>\n<p><a href="/99802f98c8606a8a894fde8f16b9c4ba.java">实例代码</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SuperEmployee</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> String superField<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> String superStaticField<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">SuperEmployee</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> String simpleField<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> String staticField <span class="token operator">=</span> <span class="token string">"defaultStatic01"</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">transient</span> String transientField <span class="token operator">=</span> <span class="token string">"defaultTransientField01"</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">transient</span> String staticTransientField<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSerialization</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Serialization start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Employee employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        employee<span class="token punctuation">.</span>superField <span class="token operator">=</span> <span class="token string">"superFieldValue"</span><span class="token punctuation">;</span>\n        employee<span class="token punctuation">.</span>superStaticField <span class="token operator">=</span> <span class="token string">"superStaticFieldValue"</span><span class="token punctuation">;</span>\n        employee<span class="token punctuation">.</span>simpleField <span class="token operator">=</span> <span class="token string">"simpleFieldValue"</span><span class="token punctuation">;</span>\n        <span class="token comment" spellcheck="true">// employee.staticField = "staticFieldValue";</span>\n        employee<span class="token punctuation">.</span>transientField <span class="token operator">=</span> <span class="token string">"transientFieldValue"</span><span class="token punctuation">;</span>\n        employee<span class="token punctuation">.</span>staticTransientField <span class="token operator">=</span> <span class="token string">"staticTransientFieldValue"</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span>\n                FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"./employee.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Serialization finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">showEmployee</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deserialization start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Employee employee <span class="token operator">=</span> null<span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span>\n                FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"./employee.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            employee <span class="token operator">=</span> <span class="token punctuation">(</span>Employee<span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> ClassNotFoundException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deserialization finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">showEmployee</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showEmployee</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"employee.superField = "</span> <span class="token operator">+</span> employee<span class="token punctuation">.</span>superField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"employee.superStaticField = "</span> <span class="token operator">+</span> employee<span class="token punctuation">.</span>superStaticField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"employee.simpleField = "</span> <span class="token operator">+</span> employee<span class="token punctuation">.</span>simpleField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"employee.staticField = "</span> <span class="token operator">+</span> employee<span class="token punctuation">.</span>staticField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"employee.staticTransientField = "</span> <span class="token operator">+</span> employee<span class="token punctuation">.</span>staticTransientField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">//serialization();</span>\n        <span class="token function">deserialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>代码运行方法:</p>\n<ol>\n<li>调用serialization方法,生成出employee.dat文件</li>\n<li>修改<code>staticField</code>和<code>staticTransientField</code>的初始值</li>\n<li>调用deserialization方法</li>\n</ol>\n<p>可以看出所有static字段其实并没有被序列化,都会等于<code>代码</code>中的值,\n其实<em>类变量</em>(静态域)的赋值是在类的初始化过程中发生的,\n序列化的是目标是<em>对象</em>而不是类,所以静态变量不会被序列化.</p>\n<h2 id="如何实现static域的序列化"><a href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0static%E5%9F%9F%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>如何实现static域的序列化</h2>\n<p>Java默认的serialization机制不会序列化static的域,但是Java允许程序员自定义\n序列化的对象,以下两种方法都可以实现序列化static域(或者transient域)</p>\n<ol>\n<li>重写writeObject()方法和readObject()方法<a href="/14a32ceaf6b1b3b6a3d8de7a1444ed2e.java">代码实例</a></li>\n<li>实现Externalizable接口</li>\n</ol>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">CustomObject</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    \n    <span class="token keyword">public</span> <span class="token keyword">static</span> String staticField <span class="token operator">=</span> <span class="token string">"defaultStaticValue"</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">transient</span> String transientField <span class="token operator">=</span> <span class="token string">"defaultTransientValue"</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">transient</span> String staticTransientField <span class="token operator">=</span> <span class="token string">"defaultStaticTransientValue"</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>ObjectOutputStream out<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>\n        out<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>staticField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>transientField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>staticTransientField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream in<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>\n        in<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        staticField <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        transientField <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        staticTransientField <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCustomSerialization</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Serialization start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        CustomObject customObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        customObject<span class="token punctuation">.</span>staticField <span class="token operator">=</span> <span class="token string">"staticFieldValue"</span><span class="token punctuation">;</span>\n        customObject<span class="token punctuation">.</span>transientField <span class="token operator">=</span> <span class="token string">"transientFieldValue"</span><span class="token punctuation">;</span>\n        customObject<span class="token punctuation">.</span>staticTransientField <span class="token operator">=</span> <span class="token string">"staticTransientFieldValue"</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span>\n                FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"./customObject.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>customObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Serialization finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">showEmployee</span><span class="token punctuation">(</span>customObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deserialization start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        CustomObject customObject <span class="token operator">=</span> null<span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span>\n                FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"./customObject.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            customObject <span class="token operator">=</span> <span class="token punctuation">(</span>CustomObject<span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> ClassNotFoundException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deserialization finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">showEmployee</span><span class="token punctuation">(</span>customObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showEmployee</span><span class="token punctuation">(</span>CustomObject customObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CustomObject:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CustomObject.staticField = "</span> <span class="token operator">+</span> customObject<span class="token punctuation">.</span>staticField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CustomObject.transientField = "</span> <span class="token operator">+</span> customObject<span class="token punctuation">.</span>transientField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CustomObject.staticTransientField = "</span> <span class="token operator">+</span> customObject<span class="token punctuation">.</span>staticTransientField<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// serialization();</span>\n        <span class="token function">deserialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>',tableOfContents:'<ul>\n<li><a href="#%E8%B5%B7%E5%9B%A0">起因</a></li>\n<li><a href="#static%E5%9F%9F%E4%BC%9A%E4%B8%8D%E4%BC%9A%E8%A2%AB%E5%BA%8F%E5%88%97%E5%8C%96">static域会不会被序列化</a></li>\n<li><a href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0static%E5%9F%9F%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96">如何实现static域的序列化</a></li>\n</ul>',frontmatter:{title:"Java中的序列化时对static字段的处理",date:"November 29, 2017",tags:["java","serialization"]}}},pathContext:{path:"/java-static-vs-transient"}}}});
//# sourceMappingURL=path---java-static-vs-transient-cb3a089876ea8ebd4367.js.map