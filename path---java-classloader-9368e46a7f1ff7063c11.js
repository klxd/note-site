webpackJsonp([0x8d1d10a49e9ef00],{"./node_modules/json-loader/index.js!./.cache/json/java-classloader.json":function(n,l){n.exports={data:{site:{siteMetadata:{title:"Note Site",author:"stone"}},markdownRemark:{id:"/home/peng/develop/workspace/stone-site/src/pages/2017-09-05-classloader/index.md absPath of file >>> MarkdownRemark",html:'<h2>Java中的类加载时机</h2>\n<p>Java中类的生命周期包括以下7个阶段:\n加载 验证 准备 解析 初始化 使用 卸载</p>\n<h3>初始化时机</h3>\n<ul>\n<li>\n<p>遇到<code>new</code> <code>getstatic</code> <code>putstatic</code> 或者 <code>invokestatic</code>这四种字节码指令时，对类进行初始化\n<code>new</code>可以认定为一种特殊的静态方法</p>\n<ul>\n<li>读取类的被final修饰的静态字段,不会触发类的初始化(已在编译期把结果放入常量池) <a href="/61350a8353eef3d194e007371b29737f.java">代码实例</a></li>\n</ul>\n</li>\n<li>使用反射方法对类进行反射调用的时候</li>\n<li>当初始化一个类的时候，自动初始化其父类 [代码]</li>\n<li>当虚拟机启动时，会触发执行主类（包含main方法的那个类）的初始化</li>\n<li>使用JDK7中的动态语言支持时，若是触发了<code>java.lang.invoke.MethodHandle</code>实例的调用，会对相应的类进行初始化</li>\n</ul>\n<h3>类加载的过程</h3>\n<ul>\n<li>\n<p>加载</p>\n<ul>\n<li>加载是<strong>类加载</strong>(Class Loading)过程的第一步</li>\n<li>\n<p>在加载阶段,虚拟机需要完成以下3件事情</p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>\n<li>将这个字节流锁代表的静态存储结构转化为方法区的运行时结构</li>\n<li>在内存中生成一个<code>java.lang.Class</code>对象,作为类的各种数据的访问入口</li>\n</ol>\n</li>\n<li>加载阶段中开发人员可以通过定义自己的类加载器去控制字节流的获取方式</li>\n</ul>\n</li>\n<li>\n<p>验证</p>\n<ul>\n<li>连接阶段的第一步</li>\n<li>确保Class文件的字节流中包含的信息符合当前虚拟机的要求</li>\n</ul>\n</li>\n<li>\n<p>准备</p>\n<ul>\n<li>为类变量(被static修饰的变量)分配内存并设置变量<strong>初始值</strong>(零值,如int为0, boolean为false)</li>\n<li>若类变量为ConstantValue(被final修饰的常量),那么在准备阶段就会初始化为常量值</li>\n</ul>\n</li>\n<li>\n<p>解析</p>\n<ul>\n<li>将常量池内的符号引用替换为直接引用</li>\n</ul>\n</li>\n<li>\n<p>初始化</p>\n<ul>\n<li>初始化是<strong>类加载</strong>(Class Loading)过程的最后一步</li>\n<li>根据程序员的代码取初始化<em>类变量</em>和其他资源</li>\n</ul>\n</li>\n</ul>\n<h3>类加载器</h3>\n<p>作用: 通过一个类的全限定名来获取描述此类的二进制字节流\n任意一个类,都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的<strong>唯一性</strong></p>\n<ul>\n<li>\n<p>启动类加载器(Bootstrap ClassLoader)</p>\n<ul>\n<li>在HotSpot虚拟机中由C++语言实,是虚拟机自身的一部分</li>\n<li>负责加载<code>&#x3C;JAVA_HOME>\\lib目录中的</code>,或者被<code>-Xbootclasspath</code>参数所指定的路径中的,\n并且是虚拟机实现的类库</li>\n<li>无法被Java程序直接引用</li>\n</ul>\n</li>\n<li>\n<p>扩展类加载器(Extension ClassLoader) </p>\n<ul>\n<li>由<code>sun.misc.Launcher$ExtClassLoader</code>实现</li>\n<li>负责加载<code>&#x3C;JAVA_HOME>\\lib\\ext</code>目录中的所有类库</li>\n<li>负责加载被<code>java.ext.dirs</code>系统变量锁指定的路径中的所有类库</li>\n<li>开发者可以直接使用扩展类加载器</li>\n</ul>\n</li>\n<li>\n<p>应用程序类加载器(Application ClassLoader)</p>\n<ul>\n<li>由`sun.misc.Launcher$AppClassLoader实现</li>\n<li>是<code>getSystemClassLoader()</code>方法的返回值,也称<em>系统类加载器</em></li>\n<li>负责加载用户类路径(ClassPath)上所指定的类库</li>\n<li>是程序中默认的类加载器(没有自定义自己的类加载器的时候)</li>\n</ul>\n</li>\n</ul>\n<h3>双亲委派模型 (Parents Delegation Model)</h3>\n<ul>\n<li>双亲委派模型要求除了顶层的启动类加载器外,其余的类加载器都应该有自己的父类加载器</li>\n<li>加载器之间的父子关系不会以继承(Inheritance)的关系实现,而是使用组合(Composition)关系</li>\n<li>\n<p>工作过程:</p>\n<ol>\n<li>如果一个类加载器收到了类加载的请求,它首先不会自己尝试加载这个类,而是先把请求委派给父类加载器取完成</li>\n<li>只有当父类加载器反馈自己无法完成加载请求时候,子加载器才会尝试自己去加载</li>\n</ol>\n</li>\n<li>优点: Java类随着它的类加载器一起具备了一种带有优先级的<strong>层次关系</strong></li>\n</ul>\n<h3>Question:</h3>\n<ul>\n<li>Java 类加载器都有哪些</li>\n<li>JVM如何加载字节码文件</li>\n<li>双亲委派模型是什么</li>\n</ul>',frontmatter:{title:"Java Classloader",date:"September 05, 2017",tags:["java","jvm"]}}},pathContext:{path:"/java-classloader/"}}}});
//# sourceMappingURL=path---java-classloader-9368e46a7f1ff7063c11.js.map